Command Kubectl commands
list pods
kubectl get pods

Describe pod
kubectl describe pod nginx-pod (podname)

check logs
kubectl logs nginx-pod (podname)



how to get inside a pod
kubectl exec -it pod/nginx-pod -- /bin/bash

or

kubectl exec -it pod/nginx-pod -- sh

Delete pod
kubectl delete pod/nginx-pod

or

kubectl delete pod nginx-pod

list namespace
kubectl get ns

 or

kubectl get namespace

Create ns
kubectl create ns web(namespacename)

list pods in specific namespace
kubectl get pods -n web(namespace name)

delete ns
kubectl delete ns/web
or
kubectl delete namespace web

Replicaset:
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-replicaset
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx-container
          image: nginx
          ports:
            - containerPort: 80

kubectl apply -f replicamanifest.yml 
kubectl get replicaset
kubectl delete replicaset/nginx-replicaset

Deployment:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx-container
          image: nginx:1.7.1
          ports:
            - containerPort: 80

kubectl apply â€“f deploymentmanifest.yml
kubectl get deployments
kubectl describe deployments/nginx-deployment
kubectl delete deployment nginx-deployment (To delete the particular deployment)
kubectl rollout status deployment nginx-deployment ( To view our rollout status)
kubectl rollout undo deployment nginx-deployment (To rollback our deployment)








Services
Node port svc manifest
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080

access: awsec2publicip:30080



Clusterip Svc manifest
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80


deploy centos pod - test curl clusteripsvcipadd:80 inside the pod
apiVersion: v1
kind: Pod
metadata:
  name: centos-pod
spec:
  containers:
    - name: centos-container
      image: centos:latest
      command: ["/bin/sleep", "infinity"]
      stdin: true
      tty: true


test curl
go inside centos pod
kubectl exec -it pod/centos-pod -n test -- /bin/bash
or
kubectl exec -it pod/centos-pod -n test -- sh

curl clusterip:80

Kubernetes Ingress
Configuration
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/baremetal/deploy.yaml


kubectl apply -f deploy.yaml


Ingressroute:

apiVersion: v1
kind: Ingress
metadata:
  name: nginx-ingress
spec:
  rules:
  - host: xyz.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80


Kubernetes Dashboard
Configuration
Step 1: Apply manifest
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

Step2: Make svc to NodePort
kubectl get svc -n kubernetes-dashboard

kubectl edit svc/kubernetes-dashboard -n kubernetes-dashboard

type: NodePort

Step 3: Access the dashboard 
Access https://publicipaws:nodeport/
Step 4: 
kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard
kubectl create clusterrolebinding cluster-admin-rolebinding --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin
Step5: Create the secret
kubectl create token dashboard-admin -n kubernetes-dashboard

Step 6: Enter the token secret
Enter the token in dashboard UI Kubernetes

HPA config:
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: example-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource: 
      name: cpu
      targetAverageUtilization: 60
d
